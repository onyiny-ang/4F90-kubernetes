apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  generateName: salmon-berlin52
spec:
  # run the salmon algorithm as TSP with Berlin 52
  entrypoint: salmon
  volumes:
  - name: workdir
    persistentVolumeClaim:
      claimName: salmon-volume
  templates:
  - name: salmon
    steps:
    - - name: seed
        template: gen-random-seed
    - - name: run
        template: salmon-berlin
        arguments:
          parameters:
          - name: rand-seed
            value: "{{steps.seed.outputs.result}}"
    - - name: print
        template: print-output
        arguments:
          parameters:
          - name: rand-seed
            value: "{{steps.seed.outputs.result}}"
    - - name: print
        template: print-output
        arguments:
          parameters:
          - name: rand-seed
            value: "{{steps.seed.outputs.result}}"
      #  withParam: "{{steps.salmon-berlin.outputs.parameters}}"  # The result of the here-script

  - name: gen-random-seed
    script:
      image: python:alpine3.6
      command: [python]
      source: |
        import random
        i = random.randint(1,100)
        print(i)

  - name: salmon-berlin
    inputs:
      parameters:
      - name: rand-seed
    container:
      image: quay.io/onyiny_ang/salmon-tsp:berlin-canary
      command: [sh, -xc]
      args:
      - |
        R='{{inputs.parameters.rand-seed}}';
        echo $R > /SalmonTSP/randomseed.txt
        cd /SalmonTSP
        ./Salmon | tee -a /mnt/vol/$R-salmon
      volumeMounts:
      - name: workdir
        mountPath: /mnt/vol
#    outputs:
#      parameters:
#      - name: output
#        valueFrom:
#          path: /SalmonTSP/salmon1.txt

  - name: print-output
    inputs:
      parameters:
      - name: rand-seed       # parameter declaration
    container:
      image: alpine:latest
      command: [sh, -c]
      args: ["R='{{inputs.parameters.rand-seed}}'; echo 'result with seed:' $R  ; cat /mnt/vol/$R-salmon"]
      volumeMounts:
      - name: workdir
        mountPath: /mnt/vol

