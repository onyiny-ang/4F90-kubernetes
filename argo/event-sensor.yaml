apiVersion: argoproj.io/v1alpha1
kind: Sensor
metadata:
  name: github-sensor
  labels:
    # sensor controller with instanceId "argo-events" will process this sensor
    sensors.argoproj.io/sensor-controller-instanceid: argo-events
    # sensor controller will use this label to match with it's own version
    # do not remove
    argo-events-sensor-version: v0.10
spec:
  template:
    spec:
      containers:
        - name: "sensor"
          image: "argoproj/sensor"
          imagePullPolicy: Always
      serviceAccountName: argo-events-sa
  dependencies:
    - name: "github-gateway:example"
  eventProtocol:
    type: "HTTP"
    http:
      port: "9300"
  triggers:
    - template:
        name: github-workflow-trigger
        group: argoproj.io
        version: v1alpha1
        kind: Workflow
        source:
          inline: |
            apiVersion: argoproj.io/v1alpha2
            kind: Workflow
            metadata:
              generateName: salmon-berlin52
            spec:
              # run the salmon algorithm as TSP with Berlin 52
              entrypoint: salmon
              arguments:
                parameters:
                - name: iterations
                  value: 30
              volumes:
              - name: workdir
                persistentVolumeClaim:
                  claimName: salmon-volume
              templates:
              - name: salmon
                steps:
                - - name: seed
                    template: gen-random-seed
                - - name: run
                    template: salmon-berlin
                    arguments:
                      parameters:
                      - name: rand-seed
                        value: "{{item}}"
                    withParam: "{{steps.seed.outputs.result}}"
                - - name: print
                    template: print-output
                    arguments:
                      parameters:
                      - name: rand-seed
                        value: "{{item}}"
                    withParam: "{{steps.seed.outputs.result}}"

              - name: gen-random-seed
                script:
                  image: python:alpine3.6
                  command: [python]
                  source: |
                    import random
                    print(random.sample(range(1,100), {{workflow.parameters.iterations}}))

              - name: salmon-berlin
                inputs:
                  parameters:
                  - name: rand-seed
                container:
                  image: quay.io/onyiny_ang/salmon-tsp:berlin-canary
                  command: [sh, -xc]
                  args:
                  - |
                    R='{{inputs.parameters.rand-seed}}';
                    echo $R > /SalmonTSP/randomseed.txt
                    cd /SalmonTSP
                    ./Salmon | tee -a /mnt/vol/$R-salmon
                    mv salmon.txt /mnt/vol/$R-salmon.txt
                  volumeMounts:
                  - name: workdir
                    mountPath: /mnt/vol

              - name: print-output
                inputs:
                  parameters:
                  - name: rand-seed       # parameter declaration
                container:
                  image: alpine:latest
                  command: [sh, -c]\
                  args: ["R='{{inputs.parameters.rand-seed}}'; echo 'result with seed:' $R  ; cat /mnt/vol/$R-salmon"]
                  volumeMounts:
                  - name: workdir
                    mountPath: /mnt/vol

      resourceParameters:
        - src:
            event: "github-gateway:example"
          dest: spec.arguments.parameters.0.value
